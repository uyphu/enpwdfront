{"version":3,"sources":["../../src/constants/app.constants.ts","../../src/pages/edit-secret/edit-secret.ts","../../src/pages/login/login.ts","../../src/pages/profile/profile.ts","../../src/pages/logout/logout.ts","../../node_modules/@angular/core/esm5 lazy","../../src/providers/configuration.ts","../../src lazy","../../src/pages/reset-password/reset-password.module.ts","../../src/pages/reset-password/reset-password.ts","../../src/pages/home/home.ts","../../src/app/main.ts","../../src/app/app.module.ts","../../src/providers/auth-service.ts","../../src/providers/variables.ts","../../src/app/app.component.ts","../../src/pages/hello-ionic/hello-ionic.ts","../../src/pages/list/list.ts","../../src/providers/api/DefaultApi.ts","../../src/utils/utils.ts","../../src/pages/secret-details/secret-details.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Platform } from 'ionic-angular';\r\n\r\n@Injectable()\r\nexport class AppConstants {\r\n\r\n  public appVersion: string;\r\n\r\n  \r\n  public static KEY_STATUS: string = 'K';\r\n\r\n  constructor(platform: Platform) {\r\n    // platform.ready().then(() => {\r\n    // AppVersion.getVersionNumber().then((s) => {\r\n    //     this.appVersion = s;\r\n    //     console.log('App version: ' + this.appVersion );\r\n    //   });\r\n    // });\r\n  }\r\n\r\n  \r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/constants/app.constants.ts","import { OnInit, Component } from '@angular/core';\r\nimport { AlertController, IonicPage, NavController, NavParams, LoadingController, Loading } from 'ionic-angular';\r\n\r\nimport {FormGroup, FormBuilder, FormControl, Validators} from \"@angular/forms\";\r\nimport { Storage } from '@ionic/storage';\r\nimport { DefaultApi } from '../../providers/api/DefaultApi';\r\n\r\nimport { Utils } from '../../utils/utils';\r\nimport * as models  from '../../providers/model/models';\r\n/**\r\n * Generated class for the AddSecret page.\r\n *\r\n * See http://ionicframework.com/docs/components/#navigation for more info\r\n * on Ionic pages and navigation.\r\n */\r\n@IonicPage()\r\n@Component({\r\n  selector: 'page-edit-secret',\r\n  templateUrl: 'edit-secret.html',\r\n})\r\nexport class EditSecretPage implements OnInit {\r\n\r\n  secret: any;\r\n  loading: Loading;\r\n  editFrom: FormGroup;\r\n  SECERET_KEY: string = '';\r\n\r\n  constructor(public navCtrl: NavController, public navParams: NavParams, private alertCtrl: AlertController,\r\n  \tpublic formBuilder: FormBuilder, private api: DefaultApi, private loadingCtrl: LoadingController, private storage: Storage\r\n    ) {\r\n    this.secret = this.navParams.get('secret');\r\n  }\r\n\r\n  ngOnInit(): any {\r\n    this.storage.get('user').then((val) => {\r\n      let loginUser: models.LoginUserResponse = val;\r\n      this.SECERET_KEY = loginUser.item.secretKey;\r\n      this.secret.userId = loginUser.item.id;\r\n      this.secret.encryptedPassword = this.secret.password;\r\n      this.secret.password = Utils.getDEcryptedCode(this.secret.password, this.SECERET_KEY);\r\n      this.secret.confirmPassword = this.secret.password;\r\n      console.log(this.secret.password);\r\n      console.log(this.secret.confirmPassword);\r\n      this.api.configuration = Utils.getConfiguration(loginUser);     \r\n    });\r\n\r\n    this.editFrom = this.formBuilder.group({\r\n      domain: ['', [Validators.required, Validators.minLength(3)]],\r\n      username: ['', [Validators.required]],\r\n      password: ['', [Validators.required]],\r\n      confirmPassword: ['', [Validators.required, this.confirmPasswordValidator.bind(this)]],\r\n      encryptedPassword: ['', [Validators.required]],\r\n      note: ['', [Validators.required]],\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    this.showLoading();\r\n    if (this.editFrom.valid == true) {\r\n      var request: models.UpdateSecretRequest = {} as models.UpdateSecretRequest;\r\n      request.id = this.secret.id;\r\n      request.password = this.secret.encryptedPassword;    \r\n      request.note = this.secret.note;\r\n      this.api.secretsIdPut(request.id, request).subscribe(response => {        \r\n          this.navCtrl.push('HomePage');\r\n        },\r\n          error => {\r\n            this.showError(error);\r\n        });\r\n    }\r\n  }\r\n\r\n  isValid(field: string) {\r\n    let formField = this.editFrom.controls[field];\r\n    if (formField !== undefined) {\r\n       return (formField.valid || formField.pristine);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  domainValidator(control: FormControl): {[s: string]: boolean} {\r\n    if (control.value !== '') {\r\n      return {invalidDomain: true};\r\n    }\r\n  }\r\n\r\n  usernameValidator(control: FormControl): {[s: string]: boolean} {\r\n    if (control.value !== '') {\r\n      return {invalidUsername: true};\r\n    }\r\n  }\r\n\r\n  passwordValidator(control: FormControl): {[s: string]: boolean} {\r\n    if (control.value !== '') {      \r\n        return {invalidPassword: true};      \r\n    }\r\n  }\r\n\r\n  confirmPasswordValidator(control: FormControl): {[s: string]: boolean} {\r\n    //debugger;\r\n    if (control !== undefined) {\r\n      if (control.value !== this.secret.password) {\r\n        return {invalidConfirmPassord: true};\r\n      }\r\n    }\r\n  }\r\n\r\n  noteValidator(control: FormControl): {[s: string]: boolean} {\r\n        return {invalidNote: true};\r\n  }\r\n\r\n  onInputTime(password: string){\r\n  \tthis.secret.encryptedPassword = Utils.getEncryptCode(this.secret.password, this.SECERET_KEY);\r\n  }\r\n\r\n  showLoading() {\r\n    this.loading = this.loadingCtrl.create({\r\n      content: 'Please wait...',\r\n      dismissOnPageChange: true\r\n    });\r\n    this.loading.present();\r\n  }\r\n\r\n  showError(text) {\r\n    this.loading.dismiss();\r\n    let errorMsg = this.getErrorMessage(text)\r\n    let alert = this.alertCtrl.create({\r\n      title: 'Fail',\r\n      subTitle: errorMsg,\r\n      buttons: ['OK']\r\n    });\r\n    alert.present();\r\n  }  \r\n\r\n  getErrorMessage(text): string {\r\n    try {\r\n      var object = JSON.parse(text._body);\r\n      return object.errorMessage;\r\n    } catch (e){\r\n      return text;\r\n    }\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/edit-secret/edit-secret.ts","import { OnInit, Component } from '@angular/core';\r\nimport { NavController, AlertController, LoadingController, Loading, IonicPage } from 'ionic-angular';\r\nimport { DefaultApi } from '../../providers/api/DefaultApi';\r\nimport { AppConstants } from '../../constants/app.constants';\r\n\r\nimport { Storage } from '@ionic/storage';\r\nimport * as models  from '../../providers/model/models';\r\n\r\n/**\r\n * Generated class for the Login page.\r\n *\r\n * See http://ionicframework.com/docs/components/#navigation for more info\r\n * on Ionic pages and navigation.\r\n */\r\n@IonicPage()\r\n@Component({\r\n  selector: 'page-login',\r\n  templateUrl: 'login.html',\r\n})\r\nexport class LoginPage implements OnInit {\r\n  loading: Loading;\r\n  registerCredentials = { email: '', password: '' };    \r\n \r\n  constructor(private nav: NavController,\r\n    private alertCtrl: AlertController, private loadingCtrl: LoadingController,\r\n    private api: DefaultApi, private storage: Storage) { }\r\n\r\n  ngOnInit() {\r\n    this.storage.get('user').then((val) => {\r\n      if (val !== undefined && val !== null) {\r\n        let loginUser: models.LoginUserResponse = val;\r\n        if (AppConstants.KEY_STATUS === loginUser.item.status) {\r\n          this.nav.setRoot('HomePage');\r\n        }    \r\n      }\r\n    });\r\n  }\r\n \r\n  public createAccount(event) {\r\n    this.nav.push('RegisterPage');\r\n  }\r\n\r\n  public forgetPassword(event) {\r\n    event.preventDefault();\r\n    this.nav.push('ResetPasswordPage');\r\n  }\r\n\r\n  public login() {\r\n    this.showLoading();\r\n    this.storage.set('user', null); \r\n    if (this.registerCredentials.email === null || this.registerCredentials.password === null) {\r\n      return this.showError(\"Please insert credentials\");\r\n    } else {\r\n      let request: models.LoginUserRequest = {} as models.LoginUserRequest;\r\n      request.email = this.registerCredentials.email;\r\n      request.password = this.registerCredentials.password;\r\n      this.api.loginPost(request).subscribe(response => {\r\n        if (response.token !== null) {                       \r\n          this.storage.set('user', response); \r\n          console.log(response);         \r\n          this.storage.set('passcode', this.registerCredentials.password);          \r\n          this.nav.push('SecretKeyPage');\r\n        } else {\r\n          this.showError(\"Access Denied\");\r\n        }\r\n        this.loading.dismiss();\r\n      },\r\n        error => {\r\n          this.showError(error);                  \r\n      });\r\n    }          \r\n  }  \r\n \r\n  showLoading() {\r\n    this.loading = this.loadingCtrl.create({\r\n      content: 'Please wait...',\r\n      dismissOnPageChange: true\r\n    });\r\n    this.loading.present();\r\n  }\r\n \r\n  showError(text) {\r\n    this.loading.dismiss();\r\n    let errorMsg = this.getErrorMessage(text)\r\n    let alert = this.alertCtrl.create({\r\n      title: 'Fail',\r\n      subTitle: errorMsg,\r\n      buttons: ['OK']\r\n    });\r\n    alert.present();\r\n  }  \r\n\r\n  getErrorMessage(text): string {\r\n    try {\r\n      var object = JSON.parse(text._body);\r\n      return object.errorMessage;\r\n    } catch (e){\r\n      return text;\r\n    }\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/login/login.ts","import { OnInit, Component } from '@angular/core';\r\nimport { IonicPage} from 'ionic-angular';\r\nimport { Storage } from '@ionic/storage';\r\n\r\nimport * as models  from '../../providers/model/models';\r\n\r\n/**\r\n * Generated class for the Profile page.\r\n *\r\n * See http://ionicframework.com/docs/components/#navigation for more info\r\n * on Ionic pages and navigation.\r\n */\r\n@IonicPage()\r\n@Component({\r\n  selector: 'page-profile',\r\n  templateUrl: 'profile.html',\r\n})\r\nexport class ProfilePage implements OnInit {\r\n\r\n\tuser:models.User = {} as models.User;\r\n\r\n  placeholderPicture = 'assets/avatar/unknown.png';\r\n\r\n  languages = ['English'];\r\n\r\n  constructor(private storage: Storage\r\n    \r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.storage.get('user').then((val) => {\r\n      if (val !== null) {\r\n        let loginUser: models.LoginUserResponse = val;\r\n        this.user = loginUser.item;\r\n        this.user.imageUrl = this.placeholderPicture;\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/profile/profile.ts","import { Component } from '@angular/core';\r\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\r\n\r\n/**\r\n * Generated class for the Logout page.\r\n *\r\n * See http://ionicframework.com/docs/components/#navigation for more info\r\n * on Ionic pages and navigation.\r\n */\r\n@IonicPage()\r\n@Component({\r\n  selector: 'page-logout',\r\n  templateUrl: 'logout.html',\r\n})\r\nexport class LogoutPage {\r\n\r\n  constructor(public navCtrl: NavController, public navParams: NavParams) {\r\n  }\r\n\r\n  ionViewDidLoad() {\r\n    console.log('ionViewDidLoad Logout');\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/logout/logout.ts","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 120;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@angular/core/esm5 lazy\n// module id = 120\n// module chunks = 10","export class Configuration {\r\n    apiKey: string;\r\n    username: string;\r\n    password: string;\r\n    accessToken: string | (() => string);\r\n    withCredentials: boolean;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/providers/configuration.ts","var map = {\n\t\"../pages/activate/activate.module\": [\n\t\t293,\n\t\t4\n\t],\n\t\"../pages/add-secret/add-secret.module\": [\n\t\t294,\n\t\t3\n\t],\n\t\"../pages/change-password/change-password.module\": [\n\t\t295,\n\t\t2\n\t],\n\t\"../pages/edit-secret/edit-secret.module\": [\n\t\t296,\n\t\t9\n\t],\n\t\"../pages/home/home.module\": [\n\t\t297,\n\t\t8\n\t],\n\t\"../pages/login/login.module\": [\n\t\t298,\n\t\t7\n\t],\n\t\"../pages/logout/logout.module\": [\n\t\t300,\n\t\t6\n\t],\n\t\"../pages/profile/profile.module\": [\n\t\t299,\n\t\t5\n\t],\n\t\"../pages/register/register.module\": [\n\t\t301,\n\t\t1\n\t],\n\t\"../pages/reset-password/reset-password.module\": [\n\t\t165\n\t],\n\t\"../pages/secret-key/secret-key.module\": [\n\t\t302,\n\t\t0\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids)\n\t\treturn Promise.reject(new Error(\"Cannot find module '\" + req + \"'.\"));\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(ids[0]);\n\t});\n};\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 164;\nmodule.exports = webpackAsyncContext;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src lazy\n// module id = 164\n// module chunks = 10","import { NgModule } from '@angular/core';\r\nimport { IonicPageModule } from 'ionic-angular';\r\nimport { ResetPasswordPage } from './reset-password';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ResetPasswordPage,\r\n  ],\r\n  imports: [\r\n    IonicPageModule.forChild(ResetPasswordPage),\r\n  ],\r\n  exports: [\r\n    ResetPasswordPage\r\n  ]\r\n})\r\nexport class ResetPasswordModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/reset-password/reset-password.module.ts","import { OnInit, Component } from '@angular/core';\r\nimport { AlertController, IonicPage, NavController, NavParams, LoadingController, Loading } from 'ionic-angular';\r\n\r\nimport {FormGroup, FormBuilder, Validators} from \"@angular/forms\";\r\nimport { Storage } from '@ionic/storage';\r\nimport { DefaultApi } from '../../providers/api/DefaultApi';\r\n\r\n// import { Utils } from '../../utils/utils';\r\nimport * as models  from '../../providers/model/models';\r\n\r\n/**\r\n * Generated class for the AddSecret page.\r\n *\r\n * See http://ionicframework.com/docs/components/#navigation for more info\r\n * on Ionic pages and navigation.\r\n */\r\n@IonicPage()\r\n@Component({\r\n  selector: 'page-reset-password',\r\n  templateUrl: 'reset-password.html',\r\n})\r\nexport class ResetPasswordPage implements OnInit {\r\n\r\n  email: any;\r\n  loading: Loading;\r\n  resetPwdFrom: FormGroup;\r\n  SECERET_KEY: string = '';\r\n\r\n  constructor(public navCtrl: NavController, public navParams: NavParams, private alertCtrl: AlertController,\r\n  \tpublic formBuilder: FormBuilder, private api: DefaultApi, private loadingCtrl: LoadingController, private storage: Storage\r\n    ) {\r\n  }\r\n\r\n  ngOnInit(): any {\r\n\r\n    this.storage.get('user').then((val) => {\r\n      if (!(val === undefined || val === null)) {\r\n        let loginUser: models.LoginUserResponse = val;\r\n        this.email = loginUser.item.email;      \r\n      }\r\n    });\r\n\r\n    this.resetPwdFrom = this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')]],      \r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    this.showLoading();\r\n    if (this.resetPwdFrom.valid == true) {\r\n      var request: models.FogotPasswordRequest = {} as models.FogotPasswordRequest;\r\n      request.email = this.email;     \r\n      this.api.usersForgetpasswordPost(request).subscribe(response => {        \r\n          this.storage.set('email', this.email); \r\n          this.navCtrl.push('ChangePasswordPage');          \r\n        },\r\n          error => {\r\n            this.showError(error);          \r\n        });\r\n    } else {\r\n      this.showError('Please fix the error field');          \r\n    }\r\n  }\r\n\r\n  isValid(field: string) {\r\n    let formField = this.resetPwdFrom.controls[field];\r\n    if (formField !== undefined) {\r\n       return (formField.valid || formField.pristine);\r\n    }\r\n    return true;\r\n  }  \r\n\r\n  showLoading() {\r\n    this.loading = this.loadingCtrl.create({\r\n      content: 'Please wait...',\r\n      dismissOnPageChange: true\r\n    });\r\n    this.loading.present();\r\n  }\r\n\r\n  showError(text) {\r\n    this.loading.dismiss();\r\n    let errorMsg = this.getErrorMessage(text)\r\n    let alert = this.alertCtrl.create({\r\n      title: 'Fail',\r\n      subTitle: errorMsg,\r\n      buttons: ['OK']\r\n    });\r\n    alert.present();\r\n  }  \r\n\r\n  getErrorMessage(text): string {\r\n    try {\r\n      var object = JSON.parse(text._body);\r\n      return object.errorMessage;\r\n    } catch (e){\r\n      return text;\r\n    }\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/reset-password/reset-password.ts","import { Utils } from './../../utils/utils';\r\nimport { OnInit, Component } from '@angular/core';\r\nimport { AlertController, IonicPage, NavController, NavParams, LoadingController, Loading } from 'ionic-angular';\r\n\r\nimport { SecretDetailsPage } from '../secret-details/secret-details';\r\nimport { DefaultApi } from '../../providers/api/DefaultApi';\r\nimport * as models  from '../../providers/model/models';\r\nimport { Storage } from '@ionic/storage';\r\n\r\n/**\r\n * Generated class for the Home page.\r\n *\r\n * See http://ionicframework.com/docs/components/#navigation for more info\r\n * on Ionic pages and navigation.\r\n */\r\n@IonicPage()\r\n@Component({\r\n  selector: 'page-home',\r\n  templateUrl: 'home.html',\r\n})\r\nexport class HomePage implements OnInit {\r\n\r\n  loading: Loading;\r\n  icons: string[];\r\n  items: Array<models.Secret>;\r\n  noMoreItemsAvailable: boolean = false; \r\n\r\n  searchInput: string = '';\r\n  QUERY_STR: string = '';\r\n  LIMIT: string = '15'\r\n  CURSOR: string = undefined;\r\n  SEARCH_TEXT: string = undefined;\r\n\r\n  constructor(public navCtrl: NavController, public navParams: NavParams, private api: DefaultApi,\r\n              private storage: Storage, private loadingCtrl: LoadingController, private alertCtrl: AlertController) {\r\n    this.icons = ['flask', 'wifi', 'beer', 'football', 'basketball', 'paper-plane',\r\n    'american-football', 'boat', 'bluetooth', 'build'];\r\n    this.items = [];    \r\n  }\r\n\r\n  ngOnInit(): any {\r\n\r\n    this.storage.get('user').then((val) => {  \r\n      if (val === undefined || val === null) {\r\n        this.navCtrl.setRoot('LoginPage');\r\n      } else {\r\n        let loginUser: models.LoginUserResponse = val; \r\n        this.QUERY_STR = 'userId:' + loginUser.item.id;   \r\n        this.api.configuration = Utils.getConfiguration(loginUser); \r\n        this.getSecrets(this.QUERY_STR);  \r\n      }        \r\n    });    \r\n  }  \r\n\r\n  getSecrets(query:string) {\r\n    if (this.noMoreItemsAvailable == false) {\r\n      this.showLoading(); \r\n    }\r\n    this.api.secretsSearchGet(query, this.LIMIT, this.CURSOR).subscribe(response => {   \r\n        if (response != null && response.items.length > 0) {          \r\n          for (let i in response.items) {              \r\n             this.items.push(response.items[i]);\r\n             //console.log(i);\r\n             let password  = Utils.getDEcryptedCode(response.items[i].password, 'c@li12345');\r\n             console.log( response.items[i].domain + '#' \r\n             + response.items[i].username + '#' + password + '#' \r\n             + response.items[i].note ); \r\n          }\r\n          this.CURSOR = response.nextPageToken;\r\n          this.noMoreItemsAvailable = true;\r\n        }\r\n        this.closeLoading();\r\n      },\r\n        error => {\r\n          this.showError(error);\r\n      });\r\n  }\r\n\r\n  doInfinite(infiniteScroll) {\r\n    if (this.noMoreItemsAvailable == true) {\r\n      //console.log(this.CURSOR);\r\n      setTimeout(() => {\r\n        //this.noMoreItemsAvailable = false;\r\n        if (this.SEARCH_TEXT !== undefined) {\r\n          this.getSecrets(this.SEARCH_TEXT);\r\n        } else {\r\n          this.getSecrets(this.QUERY_STR);\r\n        }\r\n        \r\n        infiniteScroll.complete();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n\r\n  itemTapped(event, secret) {\r\n    //console.log(\"itemTapped\");\r\n    //console.log(secret)\r\n    this.navCtrl.push(SecretDetailsPage, { 'secret': secret });\r\n  }\r\n\r\n  onInput(event) {\r\n    if (this.searchInput.length >= 3) {\r\n      this.items = [];\r\n      this.CURSOR = undefined;\r\n      this.SEARCH_TEXT = this.QUERY_STR + '&searchText:' + this.searchInput;\r\n      this.noMoreItemsAvailable = false;\r\n      this.getSecrets(this.SEARCH_TEXT);\r\n    } else if (this.searchInput.length == 0) {\r\n      this.SEARCH_TEXT = undefined;\r\n      this.CURSOR = undefined;\r\n      this.items = [];\r\n      this.noMoreItemsAvailable = false;\r\n      this.getSecrets(this.QUERY_STR);\r\n    } \r\n    \r\n  }\r\n\r\n  onCancel(event) {\r\n\r\n  }\r\n\r\n  presentConfirm(event, secret) {\r\n    let alert = this.alertCtrl.create({\r\n      title: 'Confirm delete',\r\n      message: 'Do you want to delete this secret?',\r\n      buttons: [\r\n        {\r\n          text: 'Cancel',\r\n          role: 'cancel',\r\n          handler: () => {\r\n            //console.log('Cancel clicked');\r\n          }\r\n        },\r\n        {\r\n          text: 'Ok',\r\n          handler: () => {            \r\n            this.deleteItem(secret);\r\n          }\r\n        }\r\n      ]\r\n    });\r\n    alert.present();\r\n  }\r\n\r\n  deleteItem(secret) {  \r\n\r\n    this.api.secretsIdDelete(secret.id).subscribe(response => {        \r\n        //if (response != null) {\r\n          let index: number = this.items.indexOf(secret);\r\n          if (index !== -1) {\r\n              this.items.splice(index, 1);\r\n          } \r\n        //}\r\n      },\r\n        error => {\r\n          this.showError(error);\r\n        \r\n      });\r\n  }\r\n\r\n  openAdd() {\r\n    this.navCtrl.push('AddSecret');\r\n  }\r\n\r\n  showLoading() {\r\n    this.loading = this.loadingCtrl.create({\r\n      content: 'Please wait...'\r\n    });\r\n    this.loading.present();\r\n  }\r\n\r\n  closeLoading() {\r\n    this.loading.dismiss();\r\n  }\r\n\r\n  showError(text) {\r\n    this.loading.dismiss();\r\n   \r\n    let errorMsg = this.getErrorMessage(text)\r\n    let alert = this.alertCtrl.create({\r\n      title: 'Fail',\r\n      subTitle: errorMsg,\r\n      buttons: ['OK']\r\n    });\r\n    alert.present();\r\n  }  \r\n\r\n  getErrorMessage(text): string {\r\n    try {\r\n      var object = JSON.parse(text._body);\r\n      return object.errorMessage;\r\n    } catch (e){\r\n      return text;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/home/home.ts","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app.module';\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/main.ts","import { HttpModule } from '@angular/http';\r\nimport { AuthService } from './../providers/auth-service';\r\nimport { DefaultApi } from './../providers/api/DefaultApi';\r\nimport { Utils } from './../utils/utils';\r\nimport { AppConstants } from './../constants/app.constants';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule, ErrorHandler } from '@angular/core';\r\nimport { IonicApp, IonicModule, IonicErrorHandler } from 'ionic-angular';\r\nimport { MyApp } from './app.component';\r\nimport { HelloIonicPage } from '../pages/hello-ionic/hello-ionic';\r\nimport { SecretDetailsPage } from '../pages/secret-details/secret-details';\r\nimport { EditSecretPage } from '../pages/edit-secret/edit-secret';\r\nimport { ListPage } from '../pages/list/list';\r\nimport { LoginPage } from '../pages/login/login';\r\nimport { LogoutPage } from '../pages/logout/logout';\r\nimport { ProfilePage } from '../pages/profile/profile';\r\nimport { ResetPasswordModule } from '../pages/reset-password/reset-password.module';\r\nimport { IonicStorageModule } from '@ionic/storage';\r\n\r\nimport { StatusBar } from '@ionic-native/status-bar';\r\nimport { SplashScreen } from '@ionic-native/splash-screen';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MyApp,\r\n    HelloIonicPage,\r\n    SecretDetailsPage,\r\n    EditSecretPage,\r\n    ListPage,\r\n    LoginPage,\r\n    LogoutPage,\r\n    ProfilePage\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpModule,\r\n    IonicModule.forRoot(MyApp),\r\n    IonicStorageModule.forRoot(),\r\n    ResetPasswordModule\r\n  ],\r\n  bootstrap: [IonicApp],\r\n  entryComponents: [\r\n    MyApp,\r\n    HelloIonicPage,\r\n    SecretDetailsPage,\r\n    EditSecretPage,\r\n    ListPage,\r\n    LoginPage,\r\n    LogoutPage,\r\n    ProfilePage\r\n  ],\r\n  providers: [\r\n    StatusBar,\r\n    SplashScreen,\r\n    {provide: ErrorHandler, useClass: IonicErrorHandler},    \r\n    AuthService,\r\n    DefaultApi,\r\n    Utils,\r\n    AppConstants\r\n  ]\r\n})\r\nexport class AppModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import { Injectable } from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\n \r\nexport class User {\r\n  name: string;\r\n  email: string;\r\n \r\n  constructor(name: string, email: string) {\r\n    this.name = name;\r\n    this.email = email;\r\n  }\r\n}\r\n \r\n@Injectable()\r\nexport class AuthService {\r\n  currentUser: User;  \r\n \r\n  public login(credentials) {\r\n    if (credentials.email === null || credentials.password === null) {\r\n      return Observable.throw(\"Please insert credentials\");\r\n    } else {\r\n      return Observable.create(observer => {\r\n        // At this point make a request to your backend to make a real check!\r\n        let access = (credentials.password === \"pass\" && credentials.email === \"email\");\r\n        this.currentUser = new User('Simon', 'saimon@devdactic.com');\r\n        observer.next(access);\r\n        observer.complete();\r\n      });\r\n    }\r\n  }  \r\n \r\n  public register(credentials) {\r\n    if (credentials.email === null || credentials.password === null) {\r\n      return Observable.throw(\"Please insert credentials\");\r\n    } else {\r\n      // At this point store the credentials to your backend!\r\n      return Observable.create(observer => {\r\n        observer.next(true);\r\n        observer.complete();\r\n      });\r\n    }\r\n  }\r\n \r\n  public getUserInfo() : User {\r\n    return this.currentUser;\r\n  }\r\n \r\n  public logout() {\r\n    return Observable.create(observer => {\r\n      this.currentUser = null;\r\n      observer.next(true);\r\n      observer.complete();\r\n    });\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/providers/auth-service.ts","import { InjectionToken } from '@angular/core';\r\n\r\nexport const BASE_PATH = new InjectionToken('basePath');\r\nexport const COLLECTION_FORMATS = {\r\n    'csv': ',',\r\n    'tsv': '   ',\r\n    'ssv': ' ',\r\n    'pipes': '|'\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/variables.ts","import { Component, ViewChild } from '@angular/core';\r\n\r\nimport { Platform, MenuController, Nav } from 'ionic-angular';\r\n\r\n//import { HelloIonicPage } from '../pages/hello-ionic/hello-ionic';\r\n//import { ListPage } from '../pages/list/list';\r\nimport { LoginPage } from '../pages/login/login';\r\nimport { LogoutPage } from '../pages/logout/logout';\r\nimport { HomePage } from '../pages/home/home';\r\nimport { ProfilePage } from '../pages/profile/profile';\r\nimport { ResetPasswordPage } from '../pages/reset-password/reset-password';\r\n\r\nimport { Storage } from '@ionic/storage';\r\nimport { StatusBar } from '@ionic-native/status-bar';\r\nimport { SplashScreen } from '@ionic-native/splash-screen';\r\n\r\n\r\n@Component({\r\n  templateUrl: 'app.html'\r\n})\r\nexport class MyApp {\r\n  @ViewChild(Nav) nav: Nav;\r\n\r\n  // make LoginPage the root (or first) page\r\n  rootPage = LoginPage;\r\n  pages: Array<{title: string, component: any, icon: any}>;\r\n\r\n  constructor(\r\n    public platform: Platform,\r\n    public menu: MenuController,\r\n    public statusBar: StatusBar,\r\n    public splashScreen: SplashScreen,\r\n    private storage: Storage\r\n  ) {\r\n    this.initializeApp();\r\n\r\n    // set our app's pages\r\n    this.pages = [\r\n      //{ title: 'Hello Ionic', component: HelloIonicPage },\r\n      //{ title: 'My First List', component: ListPage },\r\n      { title: 'Home', component: HomePage, icon: 'home'},\r\n      { title: 'Profile', component: ProfilePage, icon: 'person'},\r\n      { title: 'Reset Password', component: ResetPasswordPage, icon: 'key'},\r\n      { title: 'Logout', component: LogoutPage, icon: 'log-out'}\r\n    ];\r\n  }\r\n\r\n  initializeApp() {\r\n    this.platform.ready().then(() => {\r\n      // Okay, so the platform is ready and our plugins are available.\r\n      // Here you can do any higher level native things you might need.\r\n      this.statusBar.styleDefault();\r\n      this.splashScreen.hide();\r\n    });\r\n  }\r\n\r\n  openPage(page) {\r\n    // close the menu when clicking a link from the menu\r\n    this.menu.close();\r\n    // navigate to the new page if it is not the current page\r\n    if (page.title == 'Logout') {\r\n      this.storage.set('user', null);\r\n      this.nav.setRoot(this.rootPage);\r\n    } else {\r\n      this.nav.setRoot(page.component);\r\n    }\r\n    \r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'page-hello-ionic',\r\n  templateUrl: 'hello-ionic.html'\r\n})\r\nexport class HelloIonicPage {\r\n  constructor() {\r\n\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/hello-ionic/hello-ionic.ts","import { Component } from '@angular/core';\r\n\r\nimport { NavController, NavParams } from 'ionic-angular';\r\n\r\nimport { SecretDetailsPage } from '../secret-details/secret-details';\r\n\r\n@Component({\r\n  selector: 'page-list',\r\n  templateUrl: 'list.html'\r\n})\r\nexport class ListPage {\r\n  icons: string[];\r\n  items: Array<{title: string, note: string, icon: string}>;\r\n\r\n  constructor(public navCtrl: NavController, public navParams: NavParams) {\r\n    this.icons = ['flask', 'wifi', 'beer', 'football', 'basketball', 'paper-plane',\r\n    'american-football', 'boat', 'bluetooth', 'build'];\r\n\r\n    this.items = [];\r\n    for(let i = 1; i < 11; i++) {\r\n      this.items.push({\r\n        title: 'Item ' + i,\r\n        note: 'This is item #' + i,\r\n        icon: this.icons[Math.floor(Math.random() * this.icons.length)]\r\n      });\r\n    }\r\n  }\r\n\r\n  itemTapped(event, item) {\r\n    this.navCtrl.push(SecretDetailsPage, {\r\n      item: item\r\n    });\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/list/list.ts","/**\r\n * secret\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 2017-02-05T01:28:32Z\r\n * \r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { Http, Headers, URLSearchParams }                    from '@angular/http';\r\nimport { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';\r\nimport { Response, ResponseContentType }                     from '@angular/http';\r\n\r\nimport { Observable }                                        from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\n\r\nimport * as models                                           from '../model/models';\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n@Injectable()\r\nexport class DefaultApi {\r\n\r\n    protected basePath = 'https://tkbl964yv9.execute-api.us-west-1.amazonaws.com/prod';\r\n    public defaultHeaders: Headers = new Headers();\r\n    public configuration: Configuration = new Configuration();\r\n\r\n    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (basePath) {\r\n            this.basePath = basePath;\r\n        }\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    public activateOptions(extraHttpRequestParams?: any): Observable<{}> {\r\n        return this.activateOptionsWithHttpInfo(extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param activateUserRequest \r\n     */\r\n    public activatePost(activateUserRequest: models.ActivateUserRequest, extraHttpRequestParams?: any): Observable<models.UserResponse> {\r\n        return this.activatePostWithHttpInfo(activateUserRequest, extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    public loginOptions(extraHttpRequestParams?: any): Observable<{}> {\r\n        return this.loginOptionsWithHttpInfo(extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param loginUserRequest \r\n     */\r\n    public loginPost(loginUserRequest: models.LoginUserRequest, extraHttpRequestParams?: any): Observable<models.LoginUserResponse> {\r\n        return this.loginPostWithHttpInfo(loginUserRequest, extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    public logoutOptions(extraHttpRequestParams?: any): Observable<{}> {\r\n        return this.logoutOptionsWithHttpInfo(extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param logoutRequest \r\n     */\r\n    public logoutPost(logoutRequest: models.LogoutRequest, extraHttpRequestParams?: any): Observable<models.LogoutResponse> {\r\n        return this.logoutPostWithHttpInfo(logoutRequest, extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    public registerOptions(extraHttpRequestParams?: any): Observable<{}> {\r\n        return this.registerOptionsWithHttpInfo(extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param registerUserRequest \r\n     */\r\n    public registerPost(registerUserRequest: models.RegisterUserRequest, extraHttpRequestParams?: any): Observable<models.RegisterUserResponse> {\r\n        return this.registerPostWithHttpInfo(registerUserRequest, extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param id \r\n     */\r\n    public secretsIdDelete(id: string, extraHttpRequestParams?: any): Observable<models.SecretResponse> {\r\n        return this.secretsIdDeleteWithHttpInfo(id, extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param id \r\n     */\r\n    public secretsIdGet(id: string, extraHttpRequestParams?: any): Observable<models.SecretResponse> {\r\n        return this.secretsIdGetWithHttpInfo(id, extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param id \r\n     */\r\n    public secretsIdOptions(id: string, extraHttpRequestParams?: any): Observable<{}> {\r\n        return this.secretsIdOptionsWithHttpInfo(id, extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param id \r\n     * @param updateSecretRequest \r\n     */\r\n    public secretsIdPut(id: string, updateSecretRequest: models.UpdateSecretRequest, extraHttpRequestParams?: any): Observable<models.SecretResponse> {\r\n        return this.secretsIdPutWithHttpInfo(id, updateSecretRequest, extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    public secretsOptions(extraHttpRequestParams?: any): Observable<{}> {\r\n        return this.secretsOptionsWithHttpInfo(extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param insertSecretRequest \r\n     */\r\n    public secretsPost(insertSecretRequest: models.InsertSecretRequest, extraHttpRequestParams?: any): Observable<models.SecretResponse> {\r\n        return this.secretsPostWithHttpInfo(insertSecretRequest, extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param query \r\n     * @param limit \r\n     * @param cursor \r\n     */\r\n    public secretsSearchGet(query: string, limit: string, cursor?: string, extraHttpRequestParams?: any): Observable<models.SearchSecretResponse> {\r\n        return this.secretsSearchGetWithHttpInfo(query, limit, cursor, extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    public secretsSearchOptions(extraHttpRequestParams?: any): Observable<{}> {\r\n        return this.secretsSearchOptionsWithHttpInfo(extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    public usersChangepasswordOptions(extraHttpRequestParams?: any): Observable<{}> {\r\n        return this.usersChangepasswordOptionsWithHttpInfo(extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param changePasswordRequest \r\n     */\r\n    public usersChangepasswordPost(changePasswordRequest: models.ChangePasswordRequest, extraHttpRequestParams?: any): Observable<models.LoginUserResponse> {\r\n        return this.usersChangepasswordPostWithHttpInfo(changePasswordRequest, extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    public usersForgetpasswordOptions(extraHttpRequestParams?: any): Observable<{}> {\r\n        return this.usersForgetpasswordOptionsWithHttpInfo(extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param fogotPasswordRequest \r\n     */\r\n    public usersForgetpasswordPost(fogotPasswordRequest: models.FogotPasswordRequest, extraHttpRequestParams?: any): Observable<models.UserResponse> {\r\n        return this.usersForgetpasswordPostWithHttpInfo(fogotPasswordRequest, extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param id \r\n     */\r\n    public usersIdDelete(id: string, extraHttpRequestParams?: any): Observable<models.UserResponse> {\r\n        return this.usersIdDeleteWithHttpInfo(id, extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param id \r\n     */\r\n    public usersIdGet(id: string, extraHttpRequestParams?: any): Observable<models.UserResponse> {\r\n        return this.usersIdGetWithHttpInfo(id, extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param id \r\n     */\r\n    public usersIdOptions(id: string, extraHttpRequestParams?: any): Observable<{}> {\r\n        return this.usersIdOptionsWithHttpInfo(id, extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param id \r\n     * @param updateUserRequest \r\n     */\r\n    public usersIdPut(id: string, updateUserRequest: models.UpdateUserRequest, extraHttpRequestParams?: any): Observable<models.UserResponse> {\r\n        return this.usersIdPutWithHttpInfo(id, updateUserRequest, extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    public usersLoginwithfacebookOptions(extraHttpRequestParams?: any): Observable<{}> {\r\n        return this.usersLoginwithfacebookOptionsWithHttpInfo(extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param loginWithTokenRequest \r\n     */\r\n    public usersLoginwithfacebookPost(loginWithTokenRequest: models.LoginWithTokenRequest, extraHttpRequestParams?: any): Observable<models.LoginUserResponse> {\r\n        return this.usersLoginwithfacebookPostWithHttpInfo(loginWithTokenRequest, extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    public usersLoginwithgoogleOptions(extraHttpRequestParams?: any): Observable<{}> {\r\n        return this.usersLoginwithgoogleOptionsWithHttpInfo(extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param loginWithTokenRequest \r\n     */\r\n    public usersLoginwithgooglePost(loginWithTokenRequest: models.LoginWithTokenRequest, extraHttpRequestParams?: any): Observable<models.LoginUserResponse> {\r\n        return this.usersLoginwithgooglePostWithHttpInfo(loginWithTokenRequest, extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    public usersUpdatesecretkeyOptions(extraHttpRequestParams?: any): Observable<{}> {\r\n        return this.usersUpdatesecretkeyOptionsWithHttpInfo(extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param updateSecretKeyRequest \r\n     */\r\n    public usersUpdatesecretkeyPost(updateSecretKeyRequest: models.UpdateSecretKeyRequest, extraHttpRequestParams?: any): Observable<models.UpdateSecretKeyRequest> {\r\n        return this.usersUpdatesecretkeyPostWithHttpInfo(updateSecretKeyRequest, extraHttpRequestParams)\r\n            .map((response: Response) => {\r\n                if (response.status === 204) {\r\n                    return undefined;\r\n                } else {\r\n                    return response.json() || {};\r\n                }\r\n            });\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * \r\n     */\r\n    public activateOptionsWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/activate';\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Options,\r\n            headers: headers,\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param activateUserRequest \r\n     */\r\n    public activatePostWithHttpInfo(activateUserRequest: models.ActivateUserRequest, extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/activate';\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // verify required parameter 'activateUserRequest' is not null or undefined\r\n        if (activateUserRequest === null || activateUserRequest === undefined) {\r\n            throw new Error('Required parameter activateUserRequest was null or undefined when calling activatePost.');\r\n        }\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        headers.set('Content-Type', 'application/json');\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Post,\r\n            headers: headers,\r\n            body: activateUserRequest == null ? '' : JSON.stringify(activateUserRequest), // https://github.com/angular/angular/issues/10612\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     */\r\n    public loginOptionsWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/login';\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Options,\r\n            headers: headers,\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param loginUserRequest \r\n     */\r\n    public loginPostWithHttpInfo(loginUserRequest: models.LoginUserRequest, extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/login';\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // verify required parameter 'loginUserRequest' is not null or undefined\r\n        if (loginUserRequest === null || loginUserRequest === undefined) {\r\n            throw new Error('Required parameter loginUserRequest was null or undefined when calling loginPost.');\r\n        }\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        headers.set('Content-Type', 'application/json');\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Post,\r\n            headers: headers,\r\n            body: loginUserRequest == null ? '' : JSON.stringify(loginUserRequest), // https://github.com/angular/angular/issues/10612\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     */\r\n    public logoutOptionsWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/logout';\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Options,\r\n            headers: headers,\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param logoutRequest \r\n     */\r\n    public logoutPostWithHttpInfo(logoutRequest: models.LogoutRequest, extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/logout';\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // verify required parameter 'logoutRequest' is not null or undefined\r\n        if (logoutRequest === null || logoutRequest === undefined) {\r\n            throw new Error('Required parameter logoutRequest was null or undefined when calling logoutPost.');\r\n        }\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // authentication (secretAuthorizer2) required\r\n        if (this.configuration.apiKey) {\r\n            headers.set('Authorization', this.configuration.apiKey);\r\n        }\r\n\r\n        headers.set('Content-Type', 'application/json');\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Post,\r\n            headers: headers,\r\n            body: logoutRequest == null ? '' : JSON.stringify(logoutRequest), // https://github.com/angular/angular/issues/10612\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     */\r\n    public registerOptionsWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/register';\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Options,\r\n            headers: headers,\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param registerUserRequest \r\n     */\r\n    public registerPostWithHttpInfo(registerUserRequest: models.RegisterUserRequest, extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/register';\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // verify required parameter 'registerUserRequest' is not null or undefined\r\n        if (registerUserRequest === null || registerUserRequest === undefined) {\r\n            throw new Error('Required parameter registerUserRequest was null or undefined when calling registerPost.');\r\n        }\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        headers.set('Content-Type', 'application/json');\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Post,\r\n            headers: headers,\r\n            body: registerUserRequest == null ? '' : JSON.stringify(registerUserRequest), // https://github.com/angular/angular/issues/10612\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param id \r\n     */\r\n    public secretsIdDeleteWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/secrets/${id}'\r\n                    .replace('${' + 'id' + '}', String(id));\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // verify required parameter 'id' is not null or undefined\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling secretsIdDelete.');\r\n        }\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // authentication (secretAuthorizer2) required\r\n        if (this.configuration.apiKey) {\r\n            headers.set('Authorization', this.configuration.apiKey);\r\n        }\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Delete,\r\n            headers: headers,\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param id \r\n     */\r\n    public secretsIdGetWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/secrets/${id}'\r\n                    .replace('${' + 'id' + '}', String(id));\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // verify required parameter 'id' is not null or undefined\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling secretsIdGet.');\r\n        }\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // authentication (secretAuthorizer2) required\r\n        if (this.configuration.apiKey) {\r\n            headers.set('Authorization', this.configuration.apiKey);\r\n        }\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Get,\r\n            headers: headers,\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param id \r\n     */\r\n    public secretsIdOptionsWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/secrets/${id}'\r\n                    .replace('${' + 'id' + '}', String(id));\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // verify required parameter 'id' is not null or undefined\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling secretsIdOptions.');\r\n        }\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Options,\r\n            headers: headers,\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param id \r\n     * @param updateSecretRequest \r\n     */\r\n    public secretsIdPutWithHttpInfo(id: string, updateSecretRequest: models.UpdateSecretRequest, extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/secrets/${id}'\r\n                    .replace('${' + 'id' + '}', String(id));\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // verify required parameter 'id' is not null or undefined\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling secretsIdPut.');\r\n        }\r\n        // verify required parameter 'updateSecretRequest' is not null or undefined\r\n        if (updateSecretRequest === null || updateSecretRequest === undefined) {\r\n            throw new Error('Required parameter updateSecretRequest was null or undefined when calling secretsIdPut.');\r\n        }\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // authentication (secretAuthorizer2) required\r\n        if (this.configuration.apiKey) {\r\n            headers.set('Authorization', this.configuration.apiKey);\r\n        }\r\n\r\n        headers.set('Content-Type', 'application/json');\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Put,\r\n            headers: headers,\r\n            body: updateSecretRequest == null ? '' : JSON.stringify(updateSecretRequest), // https://github.com/angular/angular/issues/10612\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     */\r\n    public secretsOptionsWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/secrets';\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Options,\r\n            headers: headers,\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param insertSecretRequest \r\n     */\r\n    public secretsPostWithHttpInfo(insertSecretRequest: models.InsertSecretRequest, extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/secrets';\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // verify required parameter 'insertSecretRequest' is not null or undefined\r\n        if (insertSecretRequest === null || insertSecretRequest === undefined) {\r\n            throw new Error('Required parameter insertSecretRequest was null or undefined when calling secretsPost.');\r\n        }\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // authentication (secretAuthorizer2) required\r\n        if (this.configuration.apiKey) {\r\n            headers.set('Authorization', this.configuration.apiKey);\r\n        }\r\n\r\n        headers.set('Content-Type', 'application/json');\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Post,\r\n            headers: headers,\r\n            body: insertSecretRequest == null ? '' : JSON.stringify(insertSecretRequest), // https://github.com/angular/angular/issues/10612\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param query \r\n     * @param limit \r\n     * @param cursor \r\n     */\r\n    public secretsSearchGetWithHttpInfo(query: string, limit: string, cursor?: string, extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/secrets/search';\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // verify required parameter 'query' is not null or undefined\r\n        if (query === null || query === undefined) {\r\n            throw new Error('Required parameter query was null or undefined when calling secretsSearchGet.');\r\n        }\r\n        // verify required parameter 'limit' is not null or undefined\r\n        if (limit === null || limit === undefined) {\r\n            throw new Error('Required parameter limit was null or undefined when calling secretsSearchGet.');\r\n        }\r\n        if (query !== undefined) {\r\n            queryParameters.set('query', <any>query);\r\n        }\r\n\r\n        if (cursor !== undefined) {\r\n            queryParameters.set('cursor', <any>cursor);\r\n        }\r\n\r\n        if (limit !== undefined) {\r\n            queryParameters.set('limit', <any>limit);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // authentication (secretAuthorizer2) required\r\n        if (this.configuration.apiKey) {\r\n            headers.set('Authorization', this.configuration.apiKey);\r\n        }\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Get,\r\n            headers: headers,\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     */\r\n    public secretsSearchOptionsWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/secrets/search';\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Options,\r\n            headers: headers,\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     */\r\n    public usersChangepasswordOptionsWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/users/changepassword';\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Options,\r\n            headers: headers,\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param changePasswordRequest \r\n     */\r\n    public usersChangepasswordPostWithHttpInfo(changePasswordRequest: models.ChangePasswordRequest, extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/users/changepassword';\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // verify required parameter 'changePasswordRequest' is not null or undefined\r\n        if (changePasswordRequest === null || changePasswordRequest === undefined) {\r\n            throw new Error('Required parameter changePasswordRequest was null or undefined when calling usersChangepasswordPost.');\r\n        }\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // authentication (secretAuthorizer2) required\r\n        if (this.configuration.apiKey) {\r\n            headers.set('Authorization', this.configuration.apiKey);\r\n        }\r\n\r\n        headers.set('Content-Type', 'application/json');\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Post,\r\n            headers: headers,\r\n            body: changePasswordRequest == null ? '' : JSON.stringify(changePasswordRequest), // https://github.com/angular/angular/issues/10612\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     */\r\n    public usersForgetpasswordOptionsWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/users/forgetpassword';\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Options,\r\n            headers: headers,\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param fogotPasswordRequest \r\n     */\r\n    public usersForgetpasswordPostWithHttpInfo(fogotPasswordRequest: models.FogotPasswordRequest, extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/users/forgetpassword';\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // verify required parameter 'fogotPasswordRequest' is not null or undefined\r\n        if (fogotPasswordRequest === null || fogotPasswordRequest === undefined) {\r\n            throw new Error('Required parameter fogotPasswordRequest was null or undefined when calling usersForgetpasswordPost.');\r\n        }\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        headers.set('Content-Type', 'application/json');\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Post,\r\n            headers: headers,\r\n            body: fogotPasswordRequest == null ? '' : JSON.stringify(fogotPasswordRequest), // https://github.com/angular/angular/issues/10612\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param id \r\n     */\r\n    public usersIdDeleteWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/users/${id}'\r\n                    .replace('${' + 'id' + '}', String(id));\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // verify required parameter 'id' is not null or undefined\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling usersIdDelete.');\r\n        }\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // authentication (secretAuthorizer2) required\r\n        if (this.configuration.apiKey) {\r\n            headers.set('Authorization', this.configuration.apiKey);\r\n        }\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Delete,\r\n            headers: headers,\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param id \r\n     */\r\n    public usersIdGetWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/users/${id}'\r\n                    .replace('${' + 'id' + '}', String(id));\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // verify required parameter 'id' is not null or undefined\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling usersIdGet.');\r\n        }\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // authentication (secretAuthorizer2) required\r\n        if (this.configuration.apiKey) {\r\n            headers.set('Authorization', this.configuration.apiKey);\r\n        }\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Get,\r\n            headers: headers,\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param id \r\n     */\r\n    public usersIdOptionsWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/users/${id}'\r\n                    .replace('${' + 'id' + '}', String(id));\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // verify required parameter 'id' is not null or undefined\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling usersIdOptions.');\r\n        }\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Options,\r\n            headers: headers,\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param id \r\n     * @param updateUserRequest \r\n     */\r\n    public usersIdPutWithHttpInfo(id: string, updateUserRequest: models.UpdateUserRequest, extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/users/${id}'\r\n                    .replace('${' + 'id' + '}', String(id));\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // verify required parameter 'id' is not null or undefined\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling usersIdPut.');\r\n        }\r\n        // verify required parameter 'updateUserRequest' is not null or undefined\r\n        if (updateUserRequest === null || updateUserRequest === undefined) {\r\n            throw new Error('Required parameter updateUserRequest was null or undefined when calling usersIdPut.');\r\n        }\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // authentication (secretAuthorizer2) required\r\n        if (this.configuration.apiKey) {\r\n            headers.set('Authorization', this.configuration.apiKey);\r\n        }\r\n\r\n        headers.set('Content-Type', 'application/json');\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Put,\r\n            headers: headers,\r\n            body: updateUserRequest == null ? '' : JSON.stringify(updateUserRequest), // https://github.com/angular/angular/issues/10612\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     */\r\n    public usersLoginwithfacebookOptionsWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/users/loginwithfacebook';\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Options,\r\n            headers: headers,\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param loginWithTokenRequest \r\n     */\r\n    public usersLoginwithfacebookPostWithHttpInfo(loginWithTokenRequest: models.LoginWithTokenRequest, extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/users/loginwithfacebook';\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // verify required parameter 'loginWithTokenRequest' is not null or undefined\r\n        if (loginWithTokenRequest === null || loginWithTokenRequest === undefined) {\r\n            throw new Error('Required parameter loginWithTokenRequest was null or undefined when calling usersLoginwithfacebookPost.');\r\n        }\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        headers.set('Content-Type', 'application/json');\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Post,\r\n            headers: headers,\r\n            body: loginWithTokenRequest == null ? '' : JSON.stringify(loginWithTokenRequest), // https://github.com/angular/angular/issues/10612\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     */\r\n    public usersLoginwithgoogleOptionsWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/users/loginwithgoogle';\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Options,\r\n            headers: headers,\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param loginWithTokenRequest \r\n     */\r\n    public usersLoginwithgooglePostWithHttpInfo(loginWithTokenRequest: models.LoginWithTokenRequest, extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/users/loginwithgoogle';\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // verify required parameter 'loginWithTokenRequest' is not null or undefined\r\n        if (loginWithTokenRequest === null || loginWithTokenRequest === undefined) {\r\n            throw new Error('Required parameter loginWithTokenRequest was null or undefined when calling usersLoginwithgooglePost.');\r\n        }\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        headers.set('Content-Type', 'application/json');\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Post,\r\n            headers: headers,\r\n            body: loginWithTokenRequest == null ? '' : JSON.stringify(loginWithTokenRequest), // https://github.com/angular/angular/issues/10612\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     */\r\n    public usersUpdatesecretkeyOptionsWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/users/updatesecretkey';\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Options,\r\n            headers: headers,\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param updateSecretKeyRequest \r\n     */\r\n    public usersUpdatesecretkeyPostWithHttpInfo(updateSecretKeyRequest: models.UpdateSecretKeyRequest, extraHttpRequestParams?: any): Observable<Response> {\r\n        const path = this.basePath + '/users/updatesecretkey';\r\n\r\n        let queryParameters = new URLSearchParams();\r\n        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845\r\n        // verify required parameter 'updateSecretKeyRequest' is not null or undefined\r\n        if (updateSecretKeyRequest === null || updateSecretKeyRequest === undefined) {\r\n            throw new Error('Required parameter updateSecretKeyRequest was null or undefined when calling usersUpdatesecretkeyPost.');\r\n        }\r\n        // to determine the Content-Type header\r\n        let consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // to determine the Accept header\r\n        let produces: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        // authentication (secretAuthorizer2) required\r\n        if (this.configuration.apiKey) {\r\n            headers.set('Authorization', this.configuration.apiKey);\r\n        }\r\n\r\n        headers.set('Content-Type', 'application/json');\r\n\r\n        let requestOptions: RequestOptionsArgs = new RequestOptions({\r\n            method: RequestMethod.Post,\r\n            headers: headers,\r\n            body: updateSecretKeyRequest == null ? '' : JSON.stringify(updateSecretKeyRequest), // https://github.com/angular/angular/issues/10612\r\n            search: queryParameters,\r\n            withCredentials:this.configuration.withCredentials\r\n        });\r\n        // https://github.com/swagger-api/swagger-codegen/issues/4037\r\n        if (extraHttpRequestParams) {\r\n            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);\r\n        }\r\n\r\n        return this.http.request(path, requestOptions);\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/api/DefaultApi.ts","import { Injectable } from \"@angular/core\";\r\nimport * as models  from '../providers/model/models';\r\nimport { Configuration } from '../providers/configuration';\r\n\r\nimport * as CryptoJS from 'crypto-js/crypto-js';\r\n\r\n@Injectable()\r\nexport class Utils {\r\n\r\n    static getConfiguration(loginUser: models.LoginUserResponse) : Configuration {\r\n\t    let configuration:Configuration = new Configuration();\r\n\t    configuration.apiKey = loginUser.token;\r\n\t    if (loginUser.auth !== undefined) {\r\n\t    \tconfiguration.accessToken = loginUser.auth.token;\r\n\t    }\t    \r\n\t    configuration.username = loginUser.item.email;\r\n\t    configuration.withCredentials = false;\r\n\t    return configuration;\r\n\t  }\t\r\n\r\n\tstatic getDEcryptedCode(pwd: string, key: string): string {\r\n\t    // Decrypt \r\n\t    var bytes = CryptoJS.AES.decrypt(pwd.toString(), key);\r\n\t    var plaintext = bytes.toString(CryptoJS.enc.Utf8);\r\n\t    return plaintext;\r\n\t  }\r\n\r\n  \tstatic getEncryptCode(pwd: string, key: string): string {\r\n\t    // Encrypt \r\n\t    var ciphertext = CryptoJS.AES.encrypt(pwd, key);\r\n\t    return ciphertext.toString();\r\n\t  }\r\n\t \r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/utils/utils.ts","import { OnInit, Component } from '@angular/core';\r\n\r\nimport { NavController, NavParams, AlertController } from 'ionic-angular';\r\nimport { Storage } from '@ionic/storage';\r\nimport { EditSecretPage } from '../edit-secret/edit-secret'\r\n\r\nimport * as CryptoJS from 'crypto-js/crypto-js';\r\n\r\n@Component({\r\n  selector: 'page-secret-details',\r\n  templateUrl: 'secret-details.html'\r\n})\r\nexport class SecretDetailsPage implements OnInit {\r\n  \r\n  selectedItem: any;\r\n  SECERET_KEY: string = '';\r\n  decryptedPassword: string = '';\r\n  encryptedPassword: string = '';\r\n\r\n  constructor(public navCtrl: NavController, public navParams: NavParams, private storage: Storage,\r\n        private alertCtrl: AlertController,) {\r\n    // If we navigated to this page, we will have an item available as a nav param    \r\n    this.selectedItem = this.navParams.get('secret');\r\n  }\r\n\r\n  ngOnInit(): any {\r\n    this.storage.get('user').then((value) => {\r\n        this.SECERET_KEY = value.item.secretKey;\r\n        this.encryptedPassword = this.selectedItem.password.toString();\r\n        this.decryptedPassword = this.selectedItem.password.toString();\r\n      });\r\n  }\r\n  \r\n  openEdit() {\r\n  \tthis.navCtrl.push(EditSecretPage, { 'secret': this.selectedItem });\r\n  }\r\n\r\n  presentPrompt() {\r\n    let alert = this.alertCtrl.create({\r\n      title: 'Secret Key',\r\n      message: 'Enter your key to decrypt password.',\r\n      inputs: [\r\n        {\r\n          name: 'key',\r\n          placeholder: 'key',\r\n          type: 'password'\r\n        }\r\n      ],\r\n      buttons: [\r\n        {\r\n          text: 'Cancel',\r\n          role: 'cancel',\r\n          handler: data => {\r\n            console.log('Cancel clicked');\r\n          }\r\n        },\r\n        {\r\n          text: 'Decrypt',\r\n          handler: data => {             \r\n            if (data.key === this.SECERET_KEY) {\r\n              let bytes = CryptoJS.AES.decrypt(this.encryptedPassword, this.SECERET_KEY);\r\n              let plaintext = bytes.toString(CryptoJS.enc.Utf8);\r\n              this.decryptedPassword = plaintext;\r\n            } else {\r\n              this.showError('Incorrect key!');\r\n            }\r\n            \r\n          }\r\n        }\r\n      ]\r\n    });\r\n    alert.present();\r\n  }\r\n\r\n  showError(text) {\r\n    let alert = this.alertCtrl.create({\r\n      title: 'Fail',\r\n      subTitle: text,\r\n      buttons: ['OK']\r\n    });\r\n    alert.present();\r\n  }  \r\n  \r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/secret-details/secret-details.ts"],"sourceRoot":""}